#!/bin/bash


# TODO silent file not found errors but not others, use named pipes?
# TODO trigger a full /home/user search when detected user infection via email scanning

print_help () {
    bold=$(tput bold)
    normal=$(tput sgr0)
    cat <<- EOF
	
	${bold}NAME${normal}
	    ${bold}php-shell-scan${normal} - PHP shells scanner
	    
	${bold}SYNOPSIS${normal}
	    ${bold}php-shell-scan${normal} [ OPTION ]
	    
	${bold}DESCRIPTION${normal}
	    Scans files looking for PHP shells using Clamscan and php-shell-detector, and optionally disables infected files
	    by moving them to a quarantine directory.
	    
	    ${bold}-q, --quarantine=[QUARANTINE_DIR]${normal}
	            Moves infected files into QUARANTINE_DIR, which defaults to /root/shells
	    
	    ${bold}-n, --notify-user=[USERNAME_PATTERN]${normal}
	            Send a notification mail to the user when a shell has been detected on her home
	            USERNAME_PATTERN defaults to '^/home/\([^/.]*\)/.*'
	    
	    ${bold}-c, --custom-email=EMAIL_PATH${normal}
	            Optional path to look for a custom email for user notification.
	            Uses 'default_shell_nofification.email' by default.
	            Environemnt variables available on the email are:
	                \${EMAIL}, \${USERNAME} and \${SHELLS}
	    
	    ${bold}-h, --help${normal}
	            Prints this help text
	    
	${bold}EXAMPLES${normal}
	    find . -iname '*php' | php-shell-scan
	    
	    find . -type f | php-shell-scan -q
	    
	    find . -type f | php-shell-scan -q /dev/null
	    
	EOF
}


QUARANTINE=false
QUARANTINE_DIR='/root/shells'
NOTIFY=false
USERNAME_PATTERN='^/home/\([^/.]*\)/.*'
EMAIL_PATH=$(dirname $0)/default_shell_nofification.email
while true; do
    case $1 in
        -q|--quarantine)
            QUARANTINE=true
            if [[ "${2}" != "" && "${2}" != '-*' ]]; then
                QUARANTINE_DIR="${2}"
                shift
            fi
            [[ ! -e "${QUARANTINE_DIR}" ]] &&
                mkdir "${QUARANTINE_DIR}"
            shift ;;
        -n|--notify-user)
            NOTIFY=true
            if [[ "${2}" != "" && "${2}" != '-*' ]]; then
                USERNAME_PATTERN="${2}"
                shift
            fi
            shift ;;
        -c|--custom-email)
            EMAIL_PATH=${2}
            if [[ ! -e "${EMAIL_PATH}" ]]; then
                echo "${EMAIL_PATH}: Does not exists" >&2
                exit 2
            fi
            shift
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        -*)
            echo "$0: Unrecognized option $1" >&2
            exit 2
            ;;
        *)
            break
            ;;
    esac
done


tmp_file=$(mktemp)
found=false
declare -A notifications


function process_shell () {
    local filename=$1
    local delete=${2:-true}
    local email=$(echo "${filename}" | sed "s#${USERNAME_PATTERN}#\1@$(hostname -d)#")
    found=true
    if [[ $QUARANTINE = true && $delete = true ]]; then
        mv "${filename}" "${QUARANTINE_DIR}"
    fi
    notifications[${email}]="${notifications[${email}]}\n${filename}"
}


FINGERPRINTS=$(cat <<- EOF
@error_reporting(0); @ini_set('error_log',NULL); @ini_set('log_errors',0);
7X1re9s2z/Dn9VcwmjfZq+PYTtu7s2MnaQ5t2jTpcugp6ePJsmxrkS1PkuNkWf77C4C
\$x74[41].\$x74[71].\$x74[10].\$x74[96].\$x74[12].\$x
function Slowloris(\$method="GET", \$url="/", \$sleep=3){
copy(\$_FILES['ufile']['tmp_name'],\$dir.chr(47).\$_FILES['ufile']['name'])) \$out
r='#000000'>Change WHMCS Info<br>Patch Control Panel : [patch]/admin<br>Path
EOF
)


regex_time=$(date +%s)
while read filename; do
    if [[ "${filename}" != *php ]]; then
        # Clamscan is not able to read from stdin, that's why a tmp file is used
        echo "${filename}" >> "${tmp_file}"
        continue
    fi
    # Lookup for common PHP shell fingerprints
    if [[ $(grep -l -F "${FINGERPRINTS}" "${filename}" 2> /dev/null) ]]; then
        process_shell "${filename}"
        echo "${filename} [REGEX] [PHP-Shell]"
    # Common PHP shell pattern
    elif [[ $(grep -l -F "@ini_set('error_log'" "${filename}" 2> /dev/null) ]]; then
        if [[ $(grep -l -F "@ini_set('log_errors'" "${filename}" 2> /dev/null) ]]; then
            if [[ $(grep -l -F "opendir(" "${filename}" 2> /dev/null) ]]; then
                process_shell "${filename}"
                echo "${filename} [REGEX] [PHP-Shell2]"
            fi
        fi
    else
        # Cleanup possible backdoors
        BACKDOOR1="<?php\s*eval\s*(\s*base64_decode\s*(\s*\$_POST\['[0-z]*'\]));?>"
        BACKDOOR2='eval\s*(\s*base64_decode.*_POST'
        if [[ $(grep -l "${BACKDOOR1}" "${filename}" 2> /dev/null) ]]; then
            process_shell "${filename}" false
            [[ $QUARANTINE = true ]] && 
                sed -i "s/${BACKDOOR1}//g" "${filename}" 2> /dev/null
            echo "${filename} [REGEX] [PHP-Backdoor]"
        elif [[ $(grep -l "${BACKDOOR2}" "${filename}" 2> /dev/null) ]]; then
            process_shell "${filename}" false
            echo "${filename} [REGEX] [PHP-Backdoor] [NON-CLEANED]"
        elif [[ "${filename}" != "" ]]; then
            echo "${filename}" >> "${tmp_file}"
        fi
    fi;
done


clam_time=$(date +%s)
removed=""
if [[ -s "${tmp_file}" ]]; then
    while read line; do
        current=( ${line} )
        filename=${current[0]/%:/}
        process_shell "${filename}"
        echo "${filename} [CLAMSCAN] [${current[1]}]"
        removed="${removed}\n${filename}"
    done < <(clamscan -i -f "${tmp_file}" 2>&1 | grep FOUND)
fi


detector_time=$(date +%s)
while read line; do
    current=( ${line} )
    filename=${current[0]}
    if [[ $(echo "${line}" | grep ' INFECTED-FILE$') ]]; then
        process_shell "${filename}" false
        echo "${filename} [${current[1]}] [NON-CLEANED]"
    else
        process_shell "${filename}"
        echo "${filename} [DETECTOR] [${current[1]}]"
    fi
done < <(echo "${removed}" \
        | grep -v -x -f - "${tmp_file}" \
        | $(dirname $0)/php-shell-detector 2> /dev/null)


rm -f "${tmp_file}"

if [[ $found = true ]]; then
    # Show performance metrics if malicious files have been found
    convertsecs() {
        ((h=${1}/3600)) && echo -n "${h} hours "
        ((m=(${1}%3600)/60)) && echo -n "${m} minutes "
        ((s=${1}%60)) && echo -n "${s} seconds"
    }
    regex_time=$(($(date +%s) - $regex_time))
    clam_time=$(($(date +%s) - $clam_time))
    detector_time=$(($(date +%s) - $detector_time))
    total_time=$(($clam_time+$regex_time+$detector_time))
    echo "" >&2
    echo "- - - - - - - - - - - - - - - - - - - - - - - - - -" >&2
    echo "REGEX TIME: $(convertsecs $regex_time)" >&2
    echo "CLAM TIME: $(convertsecs $clam_time)" >&2
    echo "DETECTOR TIME: $(convertsecs $detector_time)" >&2
    echo "TOTAL TIME: $(convertsecs $total_time)" >&2
fi

if [[ $NOTIFY = true ]]; then
    # Send pending user notifications if any
    for email in "${!notifications[@]}"; do
        EMAIL=${email}
        USERNAME=${EMAIL//@*/}
        SHELLS=$(echo -e "${notifications[${email}]}")
        EMAIL=$(cat "${EMAIL_PATH}")
        EMAIL="echo \"${EMAIL}\""
        EMAIL="$(eval "${EMAIL}")"
        echo "${EMAIL}"
    done
fi
