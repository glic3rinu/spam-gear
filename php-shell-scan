#!/bin/bash


print_help () {
    bold=$(tput bold)
    normal=$(tput sgr0)
    cat <<- EOF
	
	${bold}NAME${normal}
	    ${bold}php-shell-scan${normal} - PHP shells scanner
	    
	${bold}SYNOPSIS${normal}
	    ${bold}php-shell-scan${normal} [ OPTION ]
	    
	${bold}DESCRIPTION${normal}
	    Scans files looking for PHP shells using Clamscan, php-shell-detector and custom fingerprints
	    and regular expressions. It can optionally disable infected files by moving them to a quarantine directory
	    and send notifactions to infected users.
	    
	    ${bold}-q, --quarantine=[QUARANTINE_DIR]${normal}
	            Moves infected files into QUARANTINE_DIR, which defaults to /root/shells
	    
	    ${bold}-n, --notify-user=[USERNAME_PATTERN]${normal}
	            Send a notification mail to the user when a shell has been detected on her home
	            USERNAME_PATTERN defaults to '^/home/\([^/.]*\)/.*'
	    
	    ${bold}-c, --custom-email=EMAIL_PATH${normal}
	            Optional path to look for a custom email for user notification.
	            Uses 'default_shell_nofification.email' by default.
	            Environemnt variables available on the email are:
	                \${EMAIL}, \${USERNAME} and \${SHELLS}
	    
	    ${bold}-h, --help${normal}
	            Prints this help text
	    
	${bold}EXAMPLES${normal}
	    find . -iname '*php' | php-shell-scan
	    
	    find . -type f | php-shell-scan -q
	    
	    find . -type f | php-shell-scan -q /dev/null
	    
	EOF
}


QUARANTINE=false
QUARANTINE_DIR='/root/shells'
NOTIFY=false
USERNAME_PATTERN='^/home/\([^/.]*\)/.*'
EMAIL_PATH=$(dirname $0)/default_shell_nofification.email
while true; do
    case $1 in
        -q|--quarantine)
            QUARANTINE=true
            if [[ "${2}" != "" && "${2}" != -* ]]; then
                QUARANTINE_DIR="${2}"
                shift
            fi
            [[ ! -e "${QUARANTINE_DIR}" ]] &&
                mkdir "${QUARANTINE_DIR}"
            shift ;;
        -n|--notify-user)
            NOTIFY=true
            if [[ "${2}" != "" && "${2}" != -* ]]; then
                USERNAME_PATTERN="${2}"
                shift
            fi
            shift ;;
        -c|--custom-email)
            EMAIL_PATH=${2}
            if [[ ! -e "${EMAIL_PATH}" ]]; then
                echo "${EMAIL_PATH}: Does not exists" >&2
                exit 2
            fi
            shift
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        -*)
            echo "$0: Unrecognized option $1" >&2
            exit 2
            ;;
        *)
            break
            ;;
    esac
done


pipe=$(mktemp -u)
pending=$(mktemp -u)
mkfifo -m 600 "$pipe"
trap 'rm -f $pipe $pending;' EXIT INT TERM HUP


dir=$(dirname $0)
found=125
declare -A notifications
initial_time=$(date +%s)


function process_shell () {
    local filename=$1
    local delete=${2:-true}
    local email=$(echo "${filename}" | sed "s#${USERNAME_PATTERN}#\1@$(hostname -d)#")
    found=126
    if [[ $QUARANTINE = true && $delete = true ]]; then
        mv "${filename}" "${QUARANTINE_DIR}"
    fi
    if [[ $NOTIFY = true ]]; then
        echo ${email} ${filename} >> $pending
    fi
}


{
    clean=''
    if [[ $QUARANTINE = true ]]; then
        clean='-c'
    fi
    while read line; do
        current=( ${line} )
        filename=${current[0]}
        if [[ "${line}" != *\] ]]; then
            echo "${line}" >&3
            continue
        fi
        if [[ "${line}" == *\[CLEANED\] || "${line}" == *\[NON-CLEANED\] ]]; then
            process_shell "${filename}" false
        else
            process_shell "${filename}"
        fi
        echo "${line}"
    done < <(cat - | { ${dir}/php-shell-detector ${clean} 2>&1 1>&4 | grep -v 'IOError' 1>&2; } 4>&1)
    exit $found
} < <(cat -) 3> $pipe &


pid=$!
trap 'rm -f $pipe $pending; kill $pid; exit 1;' INT TERM HUP


{
    while read line; do
        current=( ${line} )
        filename=${current[0]}
        process_shell "${filename}"
        echo "${line}"
    done < <(cat - | { ${dir}/clamd-client 2>&1 1>&4 | grep -v 'IOError' 1>&2; } 4>&1)
} < $pipe


clam_found=$found
wait %1
detector_found=$?


if [[ $NOTIFY = true && -e ${pending} ]]; then
    # Send pending user notifications if any
    while read line; do
        parts=( ${line} )
        notifications[${parts[0]}]="${notifications[${parts[0]}]}\n${parts[1]}"
    done < <(cat $pending)
    rm $pending
    for EMAIL in "${!notifications[@]}"; do
        USERNAME=${EMAIL//@*/}
        SHELLS=$(echo -e "${notifications[${EMAIL}]}")
        email=$(cat "${EMAIL_PATH}")
        email="echo \"${email}\""
        email="$(eval "${email}")"
        echo "${email}" | sendmail -i -t
    done
fi


if [[ $detector_found -eq 126 || $clam_found -eq 126 ]]; then
    # Show performance metrics if malicious files have been found
    convertsecs() {
        ((h=${1}/3600)) && echo -n "${h} hours "
        ((m=(${1}%3600)/60)) && echo -n "${m} minutes "
        ((s=${1}%60)) && echo -n "${s} seconds"
    }
    total_time=$(($(date +%s) - $initial_time))
    echo "" >&2
    echo "TOTAL TIME: $(convertsecs $total_time)" >&2
    exit 1
fi

exit 0
