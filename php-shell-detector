#!/usr/bin/python

# This is a rewrite of this project https://github.com/emposha/Shell-Detector
# Shorter, more robust and faster
# How fast? 3m12.543s vs 0m19.876s ;)

# USAGES
#   find . -type f | python php-shell-detector.py
#   python php-shell-detector.py updatedb


import os
import re
import sys
import base64
import urllib2


def unserialize_array(s):
    (l, _, s) = s.partition(':')
    a, k, s = {}, None, s[1:]
    for i in range(0, int(l) * 2):
        (v, s) = unserialize(s)
        if k:
            a[k] = v
            k = None
        else:
            k = v
    return (a, s[1:])


def unserialize_string(s):
    (l, _, s) = s.partition(':')
    return (s[1:int(l) + 1], s[int(l) + 3:])


def unserialize(s):
    methods = {
        'i': lambda s: (int(x[0]), s.partition(';')[2]),
        'b': lambda s: (x[0] == '1', s.partition(';')[2]),
        'd': lambda s: (float(x[0]), s.partition(';')[2]),
        'n': lambda s: (None, s),
        's': unserialize_string,
        'a': unserialize_array,
    }
    return methods[s[0].lower()](s[2:])


def updatedb(dirname):
    dbpath = os.path.join(dirname, 'shelldetect.db')
    url = 'https://raw.github.com/emposha/PHP-Shell-Detector/master/shelldetect.db'
    database = urllib2.urlopen(url).read()
    try:
        unserialize(base64.decodestring(database))
    except Exception as e:
        sys.stderr.write(str(e) + '\n')
        sys.exit(1)
    with open(dbpath, "wb") as local_file:
        local_file.write(database)
    sys.exit(0)


def analyse(clean, dirname):
    dbpath = os.path.join(dirname, 'shelldetect.db')
    regex_shell = re.compile('(.*)\[(.*?)\]\[(.*?)\]\[(.*?)\]')
    database = str(open(dbpath, 'r').read())
    database = base64.decodestring(database)
    
    backdoorspath = os.path.join(dirname, 'backdoors.re')
    backdoor_regex = re.compile(r'eval\s*\(\s*base64_decode.*_POST')
    backdoors = []
    for num, backdoor in enumerate(open(backdoorspath, 'r')):
        backdoors.append((num, re.compile(backdoor.strip())))
    
    custom_path = os.path.join(dirname, 'fingerprints.txt')
    custom = []
    for num, fingerprint in enumerate(open(custom_path, 'r')):
        custom.append((num, fingerprint.strip()))
    
    fingerprints = []
    for fingerprint, shellname in unserialize(database)[0].iteritems():
        if fingerprint == "version":
            continue
        if 'bb:' in fingerprint:
            fingerprint = bytes(fingerprint.replace('bb:', ''))
            fingerprint = base64.decodestring(fingerprint)
        fingerprints.append([re.compile(re.escape(fingerprint)), shellname])
    
    for filename in sys.stdin:
        filename = filename.strip()
        if not filename.endswith('.php'):
            print filename
            continue
        try:
            f = open(filename, 'rt')
        except IOError:
            sys.stderr.write('%s: IOError\n' % filename)
            continue
        with f:
            found = False
            last = ''
            content = str(f.read())
            # Check custom fingerprints
            for num, fingerprint in custom:
                if fingerprint in content:
                    found = True
                    print filename, '[CUSTOM] [PHP.Finger.%i]' % num
                    break
            else:
                # Check php-shell-detector
                for fingerprint, shellname in fingerprints:
                    if fingerprint.findall(content):
                        shell = regex_shell.findall(shellname)[0]
                        label = "[DETECTOR] [%s]" % shell[0]
                        if shell[2] not in ['0', '1']:
                            label += ' [NON-CLEANED]'
                            last = filename, label
                        else:
                            found = True
                            print filename, label
                        break
            if not found:
                # Check custom backdoors
                for num, backdoor in backdoors:
                    if backdoor.search(content):
                        found = True
                        if clean:
                            content = backdoor.sub('', content)
                            with open(filename, 'wt') as f:
                                f.write(content)
                        print filename, '[CUSTOM] [PHP.Backdoor.%i]' % num
                        break
                else:
                    if backdoor_regex.search(content):
                        last = filename, '[CUSTOM] [Php.Backdoor] [NON-CLEANED]'
            if not found:
                if last != '':
                    print last[0], last[1]
                print filename


if __name__ == "__main__":
    dirname = os.path.dirname(os.path.realpath(__file__))
    clean = False
    if len(sys.argv) == 2 and sys.argv[1] == 'updatedb':
        updatedb(dirname)
    elif len(sys.argv) == 2 and sys.argv[1] == '-c':
        clean = True
        analyse(clean, dirname)
    else:
        analyse(clean, dirname)
