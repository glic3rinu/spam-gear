#!/usr/bin/python

# This is a rewrite of this project https://github.com/emposha/Shell-Detector
# Shorter, more robust and faster
# How fast? 3m12.543s vs 0m19.876s ;)


import argparse
import errno
import os
import re
import shutil
import sys
import base64
import urllib2


def unserialize_array(s):
    (l, _, s) = s.partition(':')
    a, k, s = {}, None, s[1:]
    for i in range(0, int(l) * 2):
        (v, s) = unserialize(s)
        if k:
            a[k] = v
            k = None
        else:
            k = v
    return (a, s[1:])


def unserialize_string(s):
    (l, _, s) = s.partition(':')
    return (s[1:int(l) + 1], s[int(l) + 3:])


def unserialize(s):
    methods = {
        'i': lambda s: (int(x[0]), s.partition(';')[2]),
        'b': lambda s: (x[0] == '1', s.partition(';')[2]),
        'd': lambda s: (float(x[0]), s.partition(';')[2]),
        'n': lambda s: (None, s),
        's': unserialize_string,
        'a': unserialize_array,
    }
    return methods[s[0].lower()](s[2:])


def apply_quarantine(filepath, args):
    if args.quarantine is not None:
        dstpath = os.path.join(args.quarantine, os.path.dirname(filepath).lstrip('/'))
        try:
            os.makedirs(dstpath)
        except OSError as exc:
            if exc.errno != errno.EEXIST or not os.path.isdir(dstpath):
                raise
        dst = os.path.join(dstpath, os.path.basename(filepath))
        shutil.move(filepath, dst)


def updatedb():
    dirname = os.path.dirname(os.path.realpath(__file__))
    dbpath = os.path.join(dirname, 'shelldetect.db')
    url = 'https://raw.github.com/emposha/PHP-Shell-Detector/master/shelldetect.db'
    database = urllib2.urlopen(url).read()
    try:
        unserialize(base64.decodestring(database))
    except Exception as e:
        sys.stderr.write(str(e) + '\n')
        sys.exit(1)
    with open(dbpath, "wb") as local_file:
        local_file.write(database)
    sys.exit(0)


def get_fingerprints():
    """ Load and precompute fingerprints """
    dirname = os.path.dirname(os.path.realpath(__file__))
    dbpath = os.path.join(dirname, 'shelldetect.db')
    database = str(open(dbpath, 'r').read())
    database = base64.decodestring(database)
    
    fingerprints = []
    for fingerprint, shellname in unserialize(database)[0].iteritems():
        if fingerprint == "version":
            continue
        if 'bb:' in fingerprint:
            fingerprint = bytes(fingerprint.replace('bb:', ''))
            fingerprint = base64.decodestring(fingerprint)
        fingerprints.append([re.compile(re.escape(fingerprint)), shellname])
    return fingerprints


def check_fingerprints(content, filepath, args, fingerprints=get_fingerprints(),
                       regex_shell=re.compile('(.*)\[(.*?)\]\[(.*?)\]\[(.*?)\]')):
    found = False
    for fingerprint, shellname in fingerprints:
        if fingerprint.findall(content):
            shell = regex_shell.findall(shellname)[0]
            label = "[DETECTOR] [%s]" % shell[0]
            # These usually are false positive
            if shell[2] not in ['0', '1']:
                label += ' [NON-CLEANED]'
            else:
                found = True
                apply_quarantine(filepath, args)
            return found, label
    return found, ''


def get_custom():
    dirname = os.path.dirname(os.path.realpath(__file__))
    custom_path = os.path.join(dirname, 'fingerprints.txt')
    custom = []
    for num, fingerprint in enumerate(open(custom_path, 'r')):
        custom.append((num, fingerprint.strip()))
    return custom


def check_custom(content, filepath, args, custom=get_custom()):
    found = False
    for num, fingerprint in custom:
        if fingerprint in content:
            found = True
            apply_quarantine(filepath, args)
            label = '[CUSTOM] [PHP.Finger.%i]' % num
            return found, label
    return found, ''


def get_backdoors():
    dirname = os.path.dirname(os.path.realpath(__file__))
    backdoorspath = os.path.join(dirname, 'backdoors.re')
    backdoors = []
    for num, backdoor in enumerate(open(backdoorspath, 'r')):
        backdoors.append((num, re.compile(backdoor.strip())))
    return backdoors


def check_backdoors(content, filepath, args, backdoors=get_backdoors(),
                    backdoor_regex=re.compile(r'eval\s*\(\s*base64_decode.*_POST')):
    found = False
    label = ''
    for num, backdoor in backdoors:
        if backdoor.search(content):
            found = True
            if args.clean:
                content = backdoor.sub('', content)
                with open(filepath, 'wt') as f:
                    f.write(content)
                label = '[CUSTOM] [PHP.Backdoor.%i] [CLEANED]' % num
            else:
                label = '[CUSTOM] [PHP.Backdoor.%i]' % num
            return found, label
    if backdoor_regex.search(content):
        label = '[CUSTOM] [Php.Backdoor] [NON-CLEANED]'
    return found, label


def analyse(args):
    for filepath in sys.stdin:
        filepath = filepath.strip()
        if not filepath.endswith(('.php', '.html', '.htm')):
            print filepath
            continue
        try:
            f = open(filepath, 'rt')
        except IOError:
            sys.stderr.write('%s: IOError\n' % filepath)
            continue
        with f:
            found = False
            last = ''
            content = str(f.read())
            found, label = check_backdoors(content, filepath, args)
            if not found:
                found, label = check_custom(content, filepath, args)
            if not found:
                found, label = check_fingerprints(content, filepath, args)
            if label:
                print filepath, label
            else:
                print filepath


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('-q', '--quarantine',
        metavar='PATH', dest='quarantine', type=str, nargs='?', const='/root/shells/',
        help='Enables quarantine of malicious files. Optional quarantine path.')
    parser.add_argument('-c', '--clean',
        dest='clean', action='store_true', default=False,
        help='Clean infected files (backdoors).')
    parser.add_argument('-u', '--update',
        dest='update', action='store_true', default=False, help='Update database')
    args = parser.parse_args()
    
    dirname = os.path.dirname(os.path.realpath(__file__))
    if args.update:
        updatedb()
        if args.clean or args.quarantine:
            analyse(args)
    else:
        analyse(args)

