#!/usr/bin/python

import os
import re
import sys


def analyse(clean):
    dirname = os.path.dirname(os.path.realpath(__file__))
    backdoorspath = os.path.join(dirname, 'backdoors.re')
    backdoor_regex = re.compile(r'eval\s*\(\s*base64_decode.*_POST')
    backdoors = []
    for num, backdoor in enumerate(open(backdoorspath, 'r')):
        backdoors.append((num, re.compile(backdoor.strip())))
    
    fingerprintspath = os.path.join(dirname, 'fingerprints.txt')
    fingerprints = []
    for num, fingerprint in enumerate(open(fingerprintspath, 'r')):
        fingerprints.append((num, fingerprint.strip()))
    
    for filename in sys.stdin.readlines():
        filename = filename.strip()
        if not filename.endswith('.php'):
            print filename
            continue
        try:
            f = open(filename, 'rt')
        except IOError:
            sys.stderr.write('%s: IOError\n' % filename)
            continue
        with f:
            match = False
            content = str(f.read())
            for num, fingerprint in fingerprints:
                if fingerprint in content:
                    match = True
                    print filename, '[PHP.Finger.%i]' % num
                    break
            else:
                for num, backdoor in backdoors:
                    if backdoor.search(content):
                        label = '[NON-CLEANED]'
                        if clean:
                            content = backdoor.sub('', content)
                            with open(filename, 'wt') as f:
                                f.write(content)
                            label = '[CLEANED]'
                        match = True
                        print filename, '[PHP.Backdoor.%i]' % num, label
                        break
                else:
                    if backdoor_regex.search(content):
                        match = True
                        print filename, '[Php.Backdoor]', '[NON-CLEANED]'
                    print filename


if __name__ == "__main__":
    clean = False
    if len(sys.argv) > 1 and sys.argv[1] == '-c':
        clean = True
    analyse(clean)
